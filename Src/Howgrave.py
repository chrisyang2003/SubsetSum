from tqdm import tqdm
from itertools import combinations
from functools import cmp_to_key
import random


a0 = 11403548843249161993992275618228258721706816
a1 = 27361345002306423198582331765263686721444075
a2 = 7765169434177236122545671965461848934747727
a3 = 23155955358394860661319054398504251117060456
a4 = 25075366948193184356821057855447743617522624
a5 = 15268196015463256228251156216682184152499638
a6 = 22880161704094306329923766688895813215245602
a7 = 9735591473832027345082210721008412978338347
a8 = 33541647104599803309426927278936381527267415
a9 = 13808838892478302538264221031092906683435087
a10 = 36169033521620255960370974680486362998773323
a11 = 26211989100885736971231981674669164631296537
a12 = 14275671120621460811876132881185735544962781
a13 = 21619613472888273833693341871907119934998341
a14 = 36960152451059653885402585347223682329121217
a15 = 16518492794226726542249927349597890876448671
a16 = 9811618722040772694495747805939356239907916
a17 = 28972041562556457166448591321699002589007134
a18 = 28813266201258186611103509815976863264810754
a19 = 2336335411690120532165118991181736886564631
a20 = 27439983355666142145253322878059527150194166
a21 = 20877654868243511787081603028204157093388828
a22 = 22542501803059147475643378518459112740667575
a23 = 26498887948159186892114502505232747948721696
a24 = 10485239152822019058684644491460488013917373
a25 = 13331042966450711800707969487476573438337108
a26 = 39863676193155063528614728412106005770134166
a27 = 7163848812691496247822743464903487220740271
a28 = 21002533253606737662107190546530063372128771
a29 = 40217723116844481985703432127451186788618192
a30 = 7276196464494896988864604085449952742417516
a31 = 31573061557636368361904215655836397573798388
a32 = 23423125337354090464956541975476146524183206
a33 = 4230418341310345811901236929213447137328847
a34 = 25209029017546484415535340467092525497324283
a35 = 40963875374026664772400522194758547227598566
a36 = 21946617760022567758725423423508454552648754
a37 = 24281722667001054945518487427506921845326999
a38 = 25728812391836671764483835775875308462901803
a39 = 3032474671464500459127191276589886726413936
a40 = 6827077790332282477103458477053975633762553
a41 = 44533873030870435538779270254241185350903047
a42 = 12208814090440661846902777207793916718562260
a43 = 23209631714342485332725619376729754940128405
a44 = 27698691591250930408344660193171045942622099
a45 = 33778520927595482191092832815173578919850218
a46 = 42341857812146985641863472662168478662541766
a47 = 19012011296717169224830131243231968146296499
a48 = 24233639260664981424873316630165015167792784
a49 = 8509780500773779283632585107943643513339603
a50 = 7854815463454207395973908168397504098689100
a51 = 9715050364553704536905393208906343113264365
a52 = 20386526830792875685496457406092577773281850
a53 = 22076525357036456412149387190668612706835325
a54 = 24280806660269403835451118121634071282126061
a55 = 10966816364762138992977424804640926221796069
a56 = 22045760169418055883321664495113957529593421
a57 = 5866391628964279839208051726139398187211763
a58 = 9467757359118129811876804406754666988653016
a59 = 11940316705587866562701797144456502091727535
a60 = 13164627209474740406748306225978081181272929
a61 = 36898951186026805769929445856294341101166630
a62 = 20440971450753721349636056669175444639613105
a63 = 9893589390276675814866380261044776221858804
a64 = 29761198462306891333594905124156638129949174
a65 = 31238129430894863888891765702095034747634753
a66 = 21636423865003779715637320738404535393533380
a67 = 25523098230092313917819773677681015453808545
a68 = 7255703561055136503459034768436941921568369
a69 = 9259013885625806921469207392435479368135183
a70 = 9094201305838782461680410727646491597873947
a71 = 35925663896145647970295635035463484441718230
a72 = 35457644364761789166249478663966262292629374
a73 = 29944539242117490987071275729242329458858419
a74 = 21586924668311252214424386983723421422545755
a75 = 28989067585446868142578342125286859913057081
a76 = 36804197418826616494150412246898348716716204
a77 = 19785511583139241838231296236988437389628404
a78 = 13854951255903242317162259509148926652124376
a79 = 18556541307728750334134279687508231417513947
a80 = 11580874106104740263431430230583412255081886
a81 = 2505499112896687360130093410143293874135707
a82 = 26852137668148991242087959516778761324082962
a83 = 32280775786597346474732765858706358433663731
a84 = 28000847301523151472357811515721211420130409
a85 = 28166015476217247835874706033075487529824086
a86 = 44391140583095044772503515353980426858532531
a87 = 10558143757458095400674912402701404267848100
a88 = 19714838745363577048878845745155850799497451
a89 = 2584144810597670297426977767958212709081305
a90 = 4768002734667600151496625685280550551862530
a91 = 12250802439171898718269277411059542807603490
a92 = 25479941925137944611767440059789642828852834
a93 = 39994783412770662349472619530819823577161633
a94 = 32091486180162084306122138941312763949788880
a95 = 5774720989198614077785893129138160308513193
a96 = 5105495306916019565004468242227836337633818
a97 = 2189480000682653547831928557502371527853528
a98 = 8853931322184555925896911684264164094309134
a99 = 24258166855728298462254966711537506697729490
a100 = 35695743598170132940104757087730025402955547
a101 = 841042532927223174838262986206422034731557
a102 = 26639981026216863727670801197336827689398574
a103 = 23238523313261035520127739295569465752910384
a104 = 32057116568675112851833246604609922632634072
a105 = 15626152906986865436979245545450935510786755
a106 = 24123561811026629445424127839570732130576007
a107 = 35708383847356015064391734558266052846097875
a108 = 23600971903141053112949610446406839138045607
a109 = 8977730496360496307988478620658883623604844
a110 = 34802540827364078946892979938549460586284441
a111 = 19050415989722626653299426269660076602167393
a112 = 35290285356842739418658093403099216989923589
a113 = 1885477253498179025144378366303141738776736
a114 = 42019964733614644678131734161621376149890249
a115 = 38271728598607254657869765045185383472835244
a116 = 643723493434217477717032794401343581582740
a117 = 40543487831563512346183575543199305573893132
a118 = 12886520337806484763644257598926288287520757
a119 = 9002479238959521802357922325311800396402606
a120 = 36785329367218074953756436295180651842886071
a121 = 9937505383319299300259157003528811027958080
a122 = 15133461229022778762021042573269078190402556
a123 = 13988315758530250641168634689375875593333461
a124 = 34080555277808156958399539467352500158948966
a125 = 3582595189556026366824553459322740299553627
a126 = 16903233154263484377301199395510187685111638
a127 = 35515192686414853573994555055601875693619685
a128 = 40950326212571085146073583997556780652859255
a129 = 23828482644548365672662413608664089121041125
a130 = 6853935043023656317893618520842014979505953
a131 = 17391022007349976845338690191741417014222795
a132 = 14653235484474842836057969267744541354827806
a133 = 32875601466347886291109046393729463689675613
a134 = 33142150367991758515616371447743918652325022
a135 = 33761822515148461611704088380799058842180992
a136 = 22003132029783221541561205056343294023328057
a137 = 11406835285302678081514608354514306109403322
a138 = 14568118596378405202646335162651090699098225
a139 = 27993826837700315973990050456444621156816033
a140 = 18640473410989359522993433485531641074871648
a141 = 15596272607490298311708134650798488833260147
a142 = 42348491267034494632016730444784050297678591
a143 = 25340262940155532962202465560846698063075846
a144 = 31513056302421687720426159418071995206229067
a145 = 37307199925102671133841452402880679720408705
a146 = 15921170106469204161863681961028088324732695
a147 = 17792764499079098580879028364239828206377152
a148 = 1414655886838985818093738206279942944825226
a149 = 33473883747787106642605525627435572705834215
a150 = 25811474196383319992991589867819562108185631
a151 = 323191600898235867040507368047670614622536
a152 = 43164234186235978303986935027081665088318122
a153 = 1285763850031789083216674246572572554058949
a154 = 41979969111210914897649658350303653573557068
a155 = 11443841642027626020142210477821953593743132
a156 = 18849919949007093852518745853574927631757659
a157 = 6813590392915411088148496394606170811470705
a158 = 18715785085138498309680683929337890718700613
a159 = 176232448088921059940943173355104475559676

n = 100
k = 16
target = 354338660700758611344106165240137362898447564

alist = []
for i in range(n):
    eval("alist.append({})".format('a' + str(i)))


def Cni(n, i):
    if not (isinstance(n, int) and isinstance(i, int) and n >= i):
        return

    result = 1
    Min, Max = min(i, n-i), max(i, n-i)
    for i in range(n, 0, -1):
        if i > Max:
            result *= i
        elif i <= Min:
            result //= i
    return result


def binarySearch(slist, x):
    '''
    return the list which left value equal to x in slist
    '''
    l = 0
    r = len(slist) - 1
    ans = []
    while l <= r:
        mid = (l + r) // 2
        if slist[mid][0] == x:
            for i in range(mid - 1, -1, -1):
                if slist[i][0] == slist[mid][0]:
                    ans.append(slist[i][1])
                else:
                    break
            ans.append(slist[mid][1])
            for i in range(mid + 1, len(slist)):
                if slist[i][0] == slist[mid][0]:
                    ans.append(slist[i][1])
                else:
                    break
            return ans
        elif slist[mid][0] > x:
            r = mid - 1
        else:
            l = mid + 1
    else:
        return []


def cmpfun(x, y):
    return x[0] - y[0]


def cmpfun(x, y):
    return x[0] - y[0]


def checkOverlap(x, y):
    for i in x:
        if i in y:
            return False
    return True


def algorithm3(sl1, sr1, sl2, sr2, n, target, M, k):

    sr1m = [(sr1[i][0] % M, i) for i in range(len(sr1))]
    sr2m = [(sr2[i][0] % M, i) for i in range(len(sr2))]

    sr1m = sorted(sr1m, key=cmp_to_key(cmpfun))
    sr2m = sorted(sr2m, key=cmp_to_key(cmpfun))

    # for i in sl1:
    #     print(i)
    sol = []
    '''
    solution list
    '''
    for m in tqdm(range(M)):
        s = []
        '''
        create empyt temp solution list
        '''

        for sl1_index in range(len(sl1)):
            '''
            loop sl1, and compute sigma_m, which equal to sigma_l1 + sigma_r1,
            we simply let sigma_t equal to sigma_m - sigma_l1
            '''
            tmp = (m - sl1[sl1_index][0]) % M
            return_list = binarySearch(sr1m, tmp)
            '''
            find if any sigma_m - sl1[i] exists in sr1, if it is existed, then we add it into solulist
            '''
            for sr1_index in return_list:
                # print(sr1_index)
                if not checkOverlap(sl1[sl1_index][1], sr1[sr1_index][1]):
                    continue
                s.append((sl1[sl1_index][0] + sr1[sr1_index][0],
                          (sl1_index, sr1_index)))

        s = sorted(s, key=cmp_to_key(cmpfun))
        # print('-----')

        '''
        sort solution list by value of left member of each pair
        '''
        for sl2_index in range(len(sl2)):
            '''
            we loop sl2 to find whether target - sigma_m - sl2[k] mod M exists in sr2
            '''
            tmp = (target - m - sl2[sl2_index][0]) % M
            return_list = binarySearch(sr2m, tmp)
            '''
            find if any target - sigma_m - sl2[sl2_index] exists in sr2
            '''
            for sr2_index in return_list:
                # print(sr2_index)
                '''
                we loop all the sr2[sl2_index] we found, and search whether \
                     target - sl2[sl2_index] - sr2[sr2_index] exists in temp solution list 
                '''
                if not checkOverlap(sl2[sl2_index][1], sr2[sr2_index][1]):
                    continue
                tt = target - sl2[sl2_index][0] - sr2[sr2_index][0]
                return_ans = binarySearch(s, tt)
                '''
                return the list if sigma_sl1 + sigma_sr1 = target - sigma_sl2 + sigma_sr2
                '''
                for i, j in return_ans:
                    '''
                    ans, we finally found it
                    '''
                    check = list(sl1[i][1]) + list(sr1[j][1]) + \
                        list(sl2[sl2_index][1]) + list(sr2[sr2_index][1])
                    if not len(set(check)) == k:
                        print(check)
                        continue
                    check_sum = 0
                    for c in check:
                        check_sum += alist[c]
                    if check_sum == target:
                        exit(
                            ''.join(['1' if i in check else '0' for i in range(n)]))


def Howgrave(alist, k, target, M):
    assert (k % 4 == 0)

    print('Mod:', M)
    alist_index = [i for i in range(n)]
    slist = []
    comb_iter = combinations(alist_index, k // 4)
    for i in tqdm(comb_iter, total=Cni(len(alist_index), k // 4)):
        ssum = 0
        for j in i:
            ssum += alist[j]
        slist.append((ssum, i))
    random.shuffle(slist)

    sl1 = slist[: len(slist) // 4]
    sr1 = slist[len(slist) // 4: len(slist) // 2]
    sl2 = slist[len(slist) // 2: (3 * len(slist)) // 4]
    sr2 = slist[(3 * len(slist)) // 4: len(slist)]
    print('quarter len', len(sl1), len(sr1), len(sl2), len(sr2))
    algorithm3(sl1, sr1, sl2, sr2, n, target, M, k)

Howgrave(alist, k, target, 2 ** 14)
