
import random
import math
from tqdm import tqdm
from functools import cmp_to_key


def clone_runoob(li1):
    li_copy = li1[:]
    return li_copy


def compare(x, y):
    return norm(x) - norm(y)


def listadd(x, y):
    assert (len(x) == len(y))
    return [x[i] + y[i] for i in range(len(x))]


def listsub(x, y):
    assert (len(x) == len(y))
    return [x[i] - y[i] for i in range(len(x))]


def checkz(zlist):
    pass


def norm(vs):
    res = 0
    for i in range(len(vs)):
        res += vs[i] * vs[i]
    return math.sqrt(res)


def solve(alist, n, k, s):
    N = int(sqrt(n))

    blist = [[] for j in range(n + 1)]
    for i in range(len(blist)):
        if i < len(blist) - 1:
            blist[i] = [1 if i == j else 0 for j in range(n)]
            blist[i] += [N * alist[i], N]
        else:
            blist[i] = [0 for i in range(n)]
            blist[i] += [N * s, k * N]

    shuffle(blist)

    while True:

        # step3 - reduce
        print("\rstep3...")
        m = matrix(ZZ, blist)
        zlist = m.BKZ(block_size=24)
        print('norm', norm(zlist[0]))
        print(zlist[0])

        #step4 - check
        if norm(zlist[0]) ^ 2 - k < 0.5:
            print('found SVP', zlist[0])
            break

        # step5 - find
        print("\rstep5...", end='')
        blist = []
        for i in range(n):
            blist.append(list(zlist[i]))
        f = True
        while f:
            f = False
            blist = sorted(blist, key=cmp_to_key(compare))
            for j in range(n):
                for kk in range(j):
                    if norm(listadd(blist[j], blist[kk])) < norm(blist[j]):
                        blist[j] = listadd(blist[j], blist[kk])
                        f = True
                    elif norm(listsub(blist[j], blist[kk])) < norm(blist[j]):
                        blist[j] = listsub(blist[j], blist[kk])
                        f = True


def main():
    alist = [4567688158292282644392204923129050407, 15927344100562897639822569631319390846, 16237186638727926404247881172951578768, 38428663813550082938695681489310882781, 26762485993137928931191297170284354307, 19507304947152413870700753726628409355, 15999583898447444907510051284366619278, 8654700076446528076464481966653478561, 11312553221539392202530199828204167382, 42390604411832728552562349957908002661, 8103623835644602806025265773965104963, 41699530062391518260703911156981461982, 42162669395936189974813031367012227585, 36353988447753212774500023635411113422, 36698285709394284859191624739760274617, 5144840550162988336200904134484359068, 13431961279774162602320810660377646880, 22389752099679506297914621391405132345, 24211567140437798229301905104719264047, 21748988818466326720487696288652040438, 1536935992636212460552146428522445450, 361926138094157837701439684380004053, 15092040138347985991135069282772565904, 10038412336191200672351991024258037194, 13545593721246684026341886897562101303, 20884641930880210972659401719751786193, 41944448402516921263334251152685638319, 8083635254800012436395531559610598167, 12647630630295935590260181963471635645, 4932639572554527595255668629189369146, 11547244442759018917554499082638887486, 7248419660281149473311311527657489800, 33853860407396646787677206805196572638, 26480492816737306784372625180338477026, 32610575993900535833437976576653873948, 30419256352783157268586784260010172443, 31064359147059452147735291066910051251, 29251030857103998592496246128095904752, 16056388254453939264579529133626972112, 33907053726119174829433109792276595254, 38163167165262706904542307047528234405, 29433014807960873421099096401668515339, 10076346362839885987693158131282668929, 22227334541542132937719569868022098615, 1947448533088621387024627775527540630, 21334703353145522046241473822340072732, 12797557744813767703716978818525530735, 25731545218537807877644036203841312391, 38058957171368446906054886682673567600, 21974040906333005388279183381995613945, 40924927859964268480441432900604901220, 38592974424300612006727209494145671824, 5706514952002832647691204884509435994, 34265465576127062023245410779999908543, 12549851513859012181305587736316918270, 17778230487951471095603899784083684416, 23376875703313549595545891947543609379, 20344332565524418466389995708558077049, 27081261599379273468062863816924576732, 17500165956951569966933161928677963238, 18012141511361493268548942517996750677, 42215525960505974763591212897127310399, 29411964685716985196325087373056526944, 36957240483125250272145258004024985702, 38198687670553403204294916566170900097, 6598626085550154307435645425784227573, 3748561345936507182663612934466979855, 18662075363078512616875135002327970979, 42003520617320459305137436652162678108, 31399181132096232759880071389688928955, 30255813452129075459514124610193150682, 39679235088991008459668540616298310069, 39061866964569306967592495882971207384, 3233023334230374697334911894304564071, 36349924618010118452280931544057809307, 29307121004748083148820545629003890753, 42275918317469511264831154400687356900, 17061004441840066011428226271919326953, 36949406942480514017053521785368024310, 8956685889363534922493371710593048942, 3469211205897769102729679169976776574, 4346044460468307153418507622146784349, 21011629332569959402053722422262725479, 22054828216116068596207358490927325504, 28171150086461388000779038592198035778, 40725743231097128037026529923536336155, 26487115944000446590789284885084937966, 1691392439801250616707118258763559393, 22000755670613531038444713685430803705,
             35566999045683659415339800574204422937, 937096103099972370856267782671545713, 26998135969440970674823638168972305532, 14073930398645645371115511506312116209, 20646857155970048449760253666717264186, 213683198247938684721608904988301921, 21189443017899072220986043508092924670, 36670590610413205089049342039794272289, 28688606264253110995045369344108857222, 42431503579666024269319726669470891745, 39219117194977878626946675835729729203]
    s = 214326896127070329471158810547025670819
    k = 12
    n = len(alist)

    print('Density:', n/RR(log(max(map(abs, alist)), 2)))
    solve(alist, n, k, s)


if __name__ == '__main__':
    main()
